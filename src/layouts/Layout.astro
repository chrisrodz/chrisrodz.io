---
import '../styles/global.css';
import { getLocaleFromUrl, t, getAlternateUrl, type Locale } from '@/lib/i18n';

export interface Props {
  title: string;
  description?: string;
  image?: string;
  alternateUrl?: string; // Optional: for translated pages with different slugs
}

const locale: Locale = getLocaleFromUrl(Astro.url);
const {
  title,
  description = t(locale, 'home.intro.paragraph1'),
  image = '/og-image.png',
  alternateUrl: providedAlternateUrl,
} = Astro.props;
const currentPath = Astro.url.pathname;
const canonicalURL = new URL(currentPath, Astro.site || 'https://chrisrodz.io');
const ogImage = new URL(image, Astro.site || 'https://chrisrodz.io');

// Generate alternate language URLs
const alternateLocale: Locale = locale === 'es' ? 'en' : 'es';
// Use provided alternateUrl (e.g., for translated blog posts) or generate one
const alternateUrl = providedAlternateUrl || getAlternateUrl(currentPath, locale, alternateLocale);
const alternateFullUrl = new URL(alternateUrl, Astro.site || 'https://chrisrodz.io');

// Format title with site name
const fullTitle = t(locale, 'site.titleWithPage', { page: title });
const currentYear = new Date().getFullYear().toString();
---

<!doctype html>
<html lang={locale}>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content={description} />
    <link rel="canonical" href={canonicalURL} />

    <!-- Sitemap -->
    <link rel="sitemap" type="application/xml" href="/sitemap-index.xml" />

    <!-- RSS Feed -->
    <link
      rel="alternate"
      type="application/rss+xml"
      title={t('en', 'blog.rssTitle')}
      href="/en/rss.xml"
    />
    <link
      rel="alternate"
      type="application/rss+xml"
      title={t('es', 'blog.rssTitle')}
      href="/rss.xml"
    />

    <!-- Alternate language links for SEO -->
    <link rel="alternate" hreflang={locale} href={canonicalURL} />
    <link rel="alternate" hreflang={alternateLocale} href={alternateFullUrl} />
    <link
      rel="alternate"
      hreflang="x-default"
      href={new URL('/', Astro.site || 'https://chrisrodz.io')}
    />

    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:title" content={fullTitle} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={ogImage} />

    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={canonicalURL} />
    <meta property="twitter:title" content={fullTitle} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={ogImage} />

    <title>{fullTitle}</title>

    <!-- Favicon -->
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
    <link rel="manifest" href="/site.webmanifest" />
    <link rel="icon" type="image/x-icon" href="/favicon.ico" />

    <!-- Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&family=Crimson+Text:wght@400;600;700&display=swap"
      rel="stylesheet"
    />

    <!-- Pico CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@picocss/pico@2/css/pico.min.css" />

    <!-- Theme script (prevent FOUC) -->
    <script is:inline>
      const theme = localStorage.getItem('theme') || 'light';
      if (theme === 'dark') {
        document.documentElement.setAttribute('data-theme', 'dark');
      }
    </script>
  </head>
  <body>
    <nav class="container main-nav">
      <ul>
        <li>
          <a
            href={locale === 'en' ? '/en' : '/'}
            class={currentPath === '/' || currentPath === '/en' ? 'active' : ''}
            >{t(locale, 'nav.home')}</a
          >
        </li>
      </ul>
      <ul class="nav-links">
        <li class="nav-actions">
          <button
            id="theme-toggle"
            aria-label={t(locale, 'accessibility.toggleTheme')}
            class="contrast icon-button"
            title={t(locale, 'accessibility.toggleThemeTitle')}
          >
            <span id="theme-icon" aria-hidden="true">🌙</span>
          </button>
        </li>
        <li class="nav-actions">
          <a
            id="lang-toggle"
            href={alternateUrl}
            class="lang-toggle"
            data-target-lang={locale === 'es' ? 'en' : 'es'}
            data-tooltip={t(
              locale,
              locale === 'es' ? 'languageSwitch.tooltipEn' : 'languageSwitch.tooltipEs'
            )}
            data-placement="bottom"
            aria-label={t(
              locale,
              locale === 'es' ? 'accessibility.switchToEnglish' : 'accessibility.switchToSpanish'
            )}
          >
            <span class="lang-icon" aria-hidden="true">{locale === 'es' ? '🇺🇸' : '🇵🇷'}</span>
            <span class="lang-text">{locale === 'es' ? 'EN' : 'ES'}</span>
          </a>
        </li>
      </ul>
      <button
        id="mobile-menu-toggle"
        class="mobile-menu-toggle"
        aria-label={t(locale, 'accessibility.toggleMenu')}
        aria-expanded="false"
      >
        <span class="hamburger-icon"></span>
      </button>
    </nav>

    <main class="container">
      <slot />
    </main>

    <footer
      class="container"
      style="margin-top: 4rem; padding: 2rem 0; border-top: 1px solid var(--pico-muted-border-color);"
    >
      <div
        style="display: flex; justify-content: space-between; align-items: center; flex-wrap: wrap; gap: 1rem;"
      >
        <p style="color: var(--pico-muted-color); margin: 0;">
          {t(locale, 'footer.copyright', { year: currentYear })}
        </p>
        <div style="display: flex; gap: 1.5rem;">
          <a href="/rss.xml" style="color: var(--pico-muted-color); text-decoration: none;">
            {t(locale, 'footer.rss')}
          </a>
          <a
            href="mailto:hey@chrisrodz.io"
            style="color: var(--pico-muted-color); text-decoration: none;"
          >
            {t(locale, 'footer.email')}
          </a>
          <a
            href="https://github.com/chrisrodz"
            target="_blank"
            rel="noopener noreferrer"
            style="color: var(--pico-muted-color); text-decoration: none;"
          >
            {t(locale, 'footer.github')}
          </a>
        </div>
      </div>
    </footer>

    <!-- Dark mode toggle script -->
    <script is:inline>
      const themeToggle = document.getElementById('theme-toggle');
      const themeIcon = document.getElementById('theme-icon');
      const html = document.documentElement;

      function setTheme(theme) {
        if (theme === 'dark') {
          html.setAttribute('data-theme', 'dark');
          themeIcon.textContent = '☀️';
        } else {
          html.setAttribute('data-theme', 'light');
          themeIcon.textContent = '🌙';
        }
        localStorage.setItem('theme', theme);
      }

      const currentTheme = html.getAttribute('data-theme') || 'light';
      themeIcon.textContent = currentTheme === 'dark' ? '☀️' : '🌙';

      themeToggle?.addEventListener('click', () => {
        const current = html.getAttribute('data-theme') || 'light';
        const next = current === 'dark' ? 'light' : 'dark';
        setTheme(next);
      });
    </script>

    <!-- Language switcher script -->
    <script is:inline>
      const langToggle = document.getElementById('lang-toggle');

      langToggle?.addEventListener('click', () => {
        const targetLang = langToggle.getAttribute('data-target-lang');
        const expires = new Date();
        expires.setFullYear(expires.getFullYear() + 1);
        document.cookie = `preferred-lang=${targetLang}; path=/; expires=${expires.toUTCString()}; SameSite=Lax`;
      });
    </script>

    <!-- Mobile menu toggle script -->
    <script is:inline>
      const mobileMenuToggle = document.getElementById('mobile-menu-toggle');
      const navLinks = document.querySelector('.nav-links');

      mobileMenuToggle?.addEventListener('click', () => {
        const isExpanded = mobileMenuToggle.getAttribute('aria-expanded') === 'true';
        mobileMenuToggle.setAttribute('aria-expanded', !isExpanded);
        navLinks?.classList.toggle('active');
        mobileMenuToggle.classList.toggle('active');
      });

      navLinks?.querySelectorAll('a').forEach((link) => {
        link.addEventListener('click', () => {
          navLinks.classList.remove('active');
          mobileMenuToggle?.classList.remove('active');
          mobileMenuToggle?.setAttribute('aria-expanded', 'false');
        });
      });

      document.addEventListener('click', (e) => {
        if (!e.target.closest('.main-nav')) {
          navLinks?.classList.remove('active');
          mobileMenuToggle?.classList.remove('active');
          mobileMenuToggle?.setAttribute('aria-expanded', 'false');
        }
      });
    </script>
  </body>
</html>
