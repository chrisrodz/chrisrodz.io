---
import Layout from '../layouts/Layout.astro';
import { supabase } from '../lib/supabase';
import { getLocaleFromUrl, useTranslations } from '@/lib/i18n';

const locale = getLocaleFromUrl(Astro.url);
const { t, formatDate } = useTranslations(locale);

// Fetch training activities
let activities = null;
let error = null;

if (supabase) {
  try {
    const { data, error: fetchError } = await supabase
      .from('activities')
      .select('*')
      .order('start_date', { ascending: false });

    activities = data;
    error = fetchError;
  } catch (e) {
    console.warn('Error fetching activities:', e);
    error = 'Error loading training data';
  }
} else {
  error = 'Database not configured';
}
---

<Layout title={t('training.title')}>
  <header>
    <h1>{t('training.heading')}</h1>
    <p>{t('training.subtitle')}</p>
  </header>

  {
    error ? (
      <section>
        <p>{t('training.errors.notConfigured')}</p>
        <a href="/admin" role="button">
          {t('training.errors.setupButton')}
        </a>
      </section>
    ) : (
      <section>
        {activities && activities.length > 0 ? (
          <div class="overflow-auto">
            <table>
              <thead>
                <tr>
                  <th>{t('training.table.date')}</th>
                  <th>{t('training.table.activity')}</th>
                  <th>{t('training.table.distance')}</th>
                  <th>{t('training.table.duration')}</th>
                  <th>{t('training.table.elevation')}</th>
                  <th>{t('training.table.avgHr')}</th>
                </tr>
              </thead>
              <tbody>
                {activities.map((activity) => (
                  <tr>
                    <td>{formatDate(new Date(activity.start_date))}</td>
                    <td>
                      <strong>{activity.type}</strong>
                      {activity.name && (
                        <>
                          <br />
                          <small>{activity.name}</small>
                        </>
                      )}
                    </td>
                    <td>
                      {activity.distance ? `${(activity.distance / 1000).toFixed(1)} km` : '-'}
                    </td>
                    <td>
                      {activity.duration
                        ? `${Math.floor(activity.duration / 60)}:${(activity.duration % 60).toString().padStart(2, '0')}`
                        : '-'}
                    </td>
                    <td>{activity.elevation_gain ? `${activity.elevation_gain}m` : '-'}</td>
                    <td>
                      {activity.average_heartrate ? `${activity.average_heartrate} bpm` : '-'}
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        ) : (
          <div>
            <p>{t('training.noActivities.message')}</p>
            <a href="/admin" role="button">
              {t('training.noActivities.setupButton')}
            </a>
          </div>
        )}
      </section>
    )
  }
</Layout>
