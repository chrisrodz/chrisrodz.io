---
import Layout from '../layouts/Layout.astro';
import { supabase } from '../lib/supabase';
import type { CoffeeLogWithBean } from '../lib/schemas/cafe';
import {
  calculateStats,
  getBrewMethodDistribution,
  getQualityOverTime,
  getMostUsedBeans,
  formatBrewRatio,
} from '../lib/cafe-stats';
import BrewMethodChart from '../components/cafe/BrewMethodChart';
import QualityChart from '../components/cafe/QualityChart';
import { getLocaleFromUrl, useTranslations } from '@/lib/i18n';

const locale = getLocaleFromUrl(Astro.url);
const { t, formatDate } = useTranslations(locale);

// Fetch all coffee logs with bean details
let logs: CoffeeLogWithBean[] = [];
let error: string | null = null;

if (!supabase) {
  error = 'Database not configured';
} else {
  try {
    const { data, error: fetchError } = await supabase
      .from('coffee_logs')
      .select('*, bean:coffee_beans(*)')
      .order('brew_time', { ascending: false })
      .limit(100); // Limit to recent 100 logs for performance

    if (fetchError) throw fetchError;
    logs = (data || []) as CoffeeLogWithBean[];
  } catch (e) {
    console.error('Error fetching coffee logs:', e);
    error = 'Failed to load coffee logs';
  }
}

// Calculate statistics
const stats = logs.length > 0 ? calculateStats(logs) : null;
const brewMethodData = logs.length > 0 ? getBrewMethodDistribution(logs) : [];
const qualityData = logs.length > 0 ? getQualityOverTime(logs) : [];
const topBeans = logs.length > 0 ? getMostUsedBeans(logs) : [];
const recentLogs = logs.slice(0, 30); // Show last 30
---

<Layout title={t('cafe.title')} description={t('cafe.metaDescription')}>
  <header class="mb">
    <h1>{t('cafe.heading')}</h1>
    <p>{t('cafe.subtitle')}</p>
  </header>

  {
    error ? (
      <section class="notice-box" data-variant="warning">
        <h2>{t('cafe.errors.heading')}</h2>
        <p>
          {error === 'Database not configured'
            ? t('cafe.errors.notConfigured')
            : t('cafe.errors.failed')}
        </p>
      </section>
    ) : logs.length === 0 ? (
      <section class="notice-box" data-variant="info">
        <h2>{t('cafe.noLogsYet.heading')}</h2>
        <p>{t('cafe.noLogsYet.message')}</p>
      </section>
    ) : (
      <>
        {/* Stats Cards */}
        <div class="grid-3 mb">
          <article class="stat-card">
            <small>{t('cafe.stats.totalLogs')}</small>
            <p class="stat-value">{stats?.totalLogs}</p>
          </article>
          <article class="stat-card">
            <small>{t('cafe.stats.thisWeek')}</small>
            <p class="stat-value">{stats?.logsThisWeek}</p>
          </article>
          <article class="stat-card">
            <small>{t('cafe.stats.avgRating')}</small>
            <p class="stat-value">{stats?.avgRating} / 5</p>
          </article>
        </div>

        {/* Visualizations */}
        <div class="grid-2 mb">
          {/* Brew Method Distribution */}
          <article>
            <h2>{t('cafe.sections.brewMethods')}</h2>
            <BrewMethodChart client:load data={brewMethodData} />
          </article>

          {/* Quality Over Time */}
          <article>
            <h2>{t('cafe.sections.qualityOverTime')}</h2>
            <QualityChart client:load data={qualityData} />
          </article>
        </div>

        {/* Most Used Beans */}
        {topBeans.length > 0 && (
          <article class="mb">
            <h2>{t('cafe.sections.topBeans')}</h2>
            {topBeans.map((item) => (
              <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 0.75rem;">
                <div>
                  <strong>{item.bean.bean_name}</strong>
                  {item.bean.roaster && <small style="display: block;">{item.bean.roaster}</small>}
                </div>
                <small>
                  {item.count} {t('cafe.misc.brews')}
                </small>
              </div>
            ))}
          </article>
        )}

        {/* Recent Logs Table */}
        <article>
          <h2>{t('cafe.sections.recentBrews')}</h2>
          <div style="overflow-x: auto;">
            <table>
              <thead>
                <tr>
                  <th>{t('cafe.table.date')}</th>
                  <th>{t('cafe.table.bean')}</th>
                  <th>{t('cafe.table.method')}</th>
                  <th>{t('cafe.table.ratio')}</th>
                  <th>{t('cafe.table.grind')}</th>
                  <th>{t('cafe.table.rating')}</th>
                  <th>{t('cafe.table.notes')}</th>
                </tr>
              </thead>
              <tbody>
                {recentLogs.map((log) => (
                  <tr>
                    <td>
                      {formatDate(new Date(log.brew_time), {
                        month: 'short',
                        day: 'numeric',
                      })}
                    </td>
                    <td>{log.bean?.bean_name || <small>{t('cafe.misc.unknown')}</small>}</td>
                    <td>{log.brew_method}</td>
                    <td style="font-family: monospace;">
                      {formatBrewRatio(log.dose_grams, log.yield_grams)}
                    </td>
                    <td>{log.grind_setting}</td>
                    <td>{log.quality_rating} / 5</td>
                    <td style="max-width: 300px; overflow: hidden; text-overflow: ellipsis;">
                      <small>{log.notes || '-'}</small>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </article>
      </>
    )
  }
</Layout>

<style>
  /* Responsive table */
  @media (max-width: 768px) {
    table {
      font-size: 0.875rem;
    }
    th,
    td {
      padding: 0.5rem 0.25rem;
    }
  }
</style>
