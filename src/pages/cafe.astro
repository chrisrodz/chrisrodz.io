---
import Layout from '../layouts/Layout.astro';
import { supabase } from '../lib/supabase';
import type { CoffeeLogWithBean } from '../lib/schemas/cafe';
import {
  calculateStats,
  getBrewMethodDistribution,
  getQualityOverTime,
  getMostUsedBeans,
  formatBrewRatio,
} from '../lib/cafe-stats';
import BrewMethodChart from '../components/cafe/BrewMethodChart';
import QualityChart from '../components/cafe/QualityChart';
import { getLocaleFromUrl, useTranslations } from '@/lib/i18n';

const locale = getLocaleFromUrl(Astro.url);
const { t, formatDate } = useTranslations(locale);

// Fetch all coffee logs with bean details
let logs: CoffeeLogWithBean[] = [];
let error: string | null = null;

if (!supabase) {
  error = 'Database not configured';
} else {
  try {
    const { data, error: fetchError } = await supabase
      .from('coffee_logs')
      .select('*, bean:coffee_beans(*)')
      .order('brew_time', { ascending: false })
      .limit(100); // Limit to recent 100 logs for performance

    if (fetchError) throw fetchError;
    logs = (data || []) as CoffeeLogWithBean[];
  } catch (e) {
    console.error('Error fetching coffee logs:', e);
    error = 'Failed to load coffee logs';
  }
}

// Get today's coffee logs
const today = new Date();
today.setHours(0, 0, 0, 0);
const todaysCoffee = logs.filter((log) => {
  const logDate = new Date(log.brew_time);
  logDate.setHours(0, 0, 0, 0);
  return logDate.getTime() === today.getTime();
});

// Calculate statistics
const stats = logs.length > 0 ? calculateStats(logs) : null;
const brewMethodData = logs.length > 0 ? getBrewMethodDistribution(logs) : [];
const qualityData = logs.length > 0 ? getQualityOverTime(logs) : [];
const topBeans = logs.length > 0 ? getMostUsedBeans(logs) : [];
const recentLogs = logs.slice(0, 30); // Show last 30

// Calculate average dose for hero stats
const avgDose =
  logs.length > 0 ? logs.reduce((sum, log) => sum + (log.dose_grams || 0), 0) / logs.length : 0;

// Helper function to format time
function formatTime(date: Date): string {
  return new Intl.DateTimeFormat('en-US', {
    hour: 'numeric',
    minute: '2-digit',
    hour12: true,
  }).format(date);
}

// Helper function to calculate brew ratio
function calculateRatio(dose: number | null, yield_grams: number | null): string {
  if (!dose || !yield_grams) return '-';
  return `1:${(yield_grams / dose).toFixed(1)}`;
}
---

<Layout title={t('cafe.title')} description={t('cafe.metaDescription')}>
  {
    error ? (
      <section class="notice-box" data-variant="warning">
        <h2>{t('cafe.errors.heading')}</h2>
        <p>
          {error === 'Database not configured'
            ? t('cafe.errors.notConfigured')
            : t('cafe.errors.failed')}
        </p>
      </section>
    ) : logs.length === 0 ? (
      <section class="notice-box" data-variant="info">
        <h2>{t('cafe.noLogsYet.heading')}</h2>
        <p>{t('cafe.noLogsYet.message')}</p>
      </section>
    ) : (
      <>
        {/* 1. WHY I'M TRACKING THIS */}
        <section class="coffee-why-section">
          <p class="coffee-why-text">{t('cafe.why.text')}</p>
        </section>

        {/* 2. TODAY'S COFFEE HERO CARD */}
        <section class="todays-coffee-section">
          <h2 class="todays-coffee-heading">{t('cafe.todaysCoffee.heading')}</h2>
          {todaysCoffee.length === 0 ? (
            <div class="todays-coffee-empty">
              <div class="empty-icon">{t('cafe.todaysCoffee.emptyIcon')}</div>
              <p>{t('cafe.todaysCoffee.emptyHeading')}</p>
              <small>{t('cafe.todaysCoffee.emptyMessage')}</small>
            </div>
          ) : (
            <div class="todays-coffee-list">
              {todaysCoffee.map((log, index) => (
                <>
                  {index > 0 && <hr class="coffee-divider" />}
                  <article class="coffee-entry">
                    <div class="coffee-time">{formatTime(new Date(log.brew_time))}</div>

                    <div class="coffee-method-bean">
                      <div class="coffee-method">{log.brew_method}</div>
                      <div class="coffee-bean">{log.bean?.bean_name || t('cafe.misc.unknown')}</div>
                    </div>

                    <div class="coffee-metrics">
                      <div>
                        {log.dose_grams}g ‚Üí {log.yield_grams}g (
                        {calculateRatio(log.dose_grams, log.yield_grams)}{' '}
                        {t('cafe.todaysCoffee.ratio')})
                      </div>
                      <div>
                        {t('cafe.todaysCoffee.grind')}: {log.grind_setting}
                      </div>
                    </div>

                    <div class="coffee-rating">
                      <span class="stars">{'‚≠ê'.repeat(log.quality_rating || 0)}</span>
                      <span class="rating-text">
                        {log.quality_rating === 5
                          ? t('cafe.todaysCoffee.dialedIn')
                          : log.quality_rating >= 4
                            ? t('cafe.todaysCoffee.greatShot')
                            : log.quality_rating >= 3
                              ? t('cafe.todaysCoffee.decent')
                              : t('cafe.todaysCoffee.needsWork')}
                      </span>
                    </div>

                    {log.notes && (
                      <div class="coffee-notes">
                        <small>
                          {t('cafe.todaysCoffee.notes')}: {log.notes.substring(0, 50)}
                          {log.notes.length > 50 ? '...' : ''}
                        </small>
                      </div>
                    )}
                  </article>
                </>
              ))}
            </div>
          )}
        </section>

        {/* 3. HERO STATS CARDS */}
        <div class="hero-stats-grid">
          <article class="hero-stat-card">
            <div class="stat-icon">‚òï</div>
            <p class="stat-value">{stats?.totalLogs}</p>
            <small>{t('cafe.stats.totalLogs')}</small>
          </article>
          <article class="hero-stat-card">
            <div class="stat-icon">‚≠ê</div>
            <p class="stat-value">{stats?.avgRating}</p>
            <small>{t('cafe.stats.avgRating')}</small>
          </article>
          <article class="hero-stat-card">
            <div class="stat-icon">‚öñÔ∏è</div>
            <p class="stat-value">{avgDose.toFixed(1)}g</p>
            <small>{t('cafe.stats.avgDose')}</small>
          </article>
        </div>

        {/* 4. MY SETUP */}
        <section class="my-setup-section">
          <h2>üõ†Ô∏è {t('cafe.equipment.heading')}</h2>
          <div class="setup-list">
            <div class="setup-item">
              <strong>{t('cafe.equipment.machine')}:</strong> {t('cafe.equipment.machineModel')}
            </div>
            <div class="setup-item">
              <strong>{t('cafe.equipment.grinder')}:</strong> {t('cafe.equipment.grinderModel')}
            </div>
            <div class="setup-item">
              <strong>{t('cafe.equipment.methods')}:</strong> {t('cafe.equipment.methodsList')}
            </div>
          </div>
        </section>

        {/* 5. BREW METHOD DISTRIBUTION - Visual Bar Chart */}
        <section class="brew-method-section">
          <h2>{t('cafe.sections.brewMethods')}</h2>
          <div class="brew-method-bars">
            {brewMethodData.map((method) => {
              const percentage = ((method.count / stats.totalLogs) * 100).toFixed(0);
              return (
                <div class="bar-container">
                  <span class="method-name">{method.method}</span>
                  <div class="bar-wrapper">
                    <div
                      class="bar"
                      style={`width: ${percentage}%`}
                      data-method={method.method.toLowerCase()}
                    />
                  </div>
                  <span class="stats">
                    {percentage}% ({method.count})
                  </span>
                </div>
              );
            })}
          </div>
        </section>

        {/* 6. RECENT LOGS TABLE (Keep existing) */}
        <article class="recent-logs-section">
          <h2>{t('cafe.sections.recentBrews')}</h2>
          <div style="overflow-x: auto;">
            <table>
              <thead>
                <tr>
                  <th>{t('cafe.table.date')}</th>
                  <th>{t('cafe.table.bean')}</th>
                  <th>{t('cafe.table.method')}</th>
                  <th>{t('cafe.table.ratio')}</th>
                  <th>{t('cafe.table.grind')}</th>
                  <th>{t('cafe.table.rating')}</th>
                </tr>
              </thead>
              <tbody>
                {recentLogs.map((log) => (
                  <tr>
                    <td>
                      {formatDate(new Date(log.brew_time), {
                        month: 'short',
                        day: 'numeric',
                      })}
                    </td>
                    <td>{log.bean?.bean_name || <small>{t('cafe.misc.unknown')}</small>}</td>
                    <td>{log.brew_method}</td>
                    <td style="font-family: monospace;">
                      {formatBrewRatio(log.dose_grams, log.yield_grams)}
                    </td>
                    <td>{log.grind_setting}</td>
                    <td>{log.quality_rating} / 5</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </article>
      </>
    )
  }
</Layout>

<style>
  /* 1. WHY I'M TRACKING THIS */
  .coffee-why-section {
    margin-bottom: 1.5rem;
    text-align: center;
  }

  .coffee-why-text {
    color: var(--pico-muted-color);
    line-height: 1.5;
    margin: 0;
    font-size: 0.9375rem;
    max-width: 60ch;
    margin-left: auto;
    margin-right: auto;
  }

  @media (max-width: 768px) {
    .coffee-why-section {
      margin-bottom: 1rem;
    }

    .coffee-why-text {
      font-size: 0.875rem;
    }
  }

  /* 2. TODAY'S COFFEE HERO CARD */
  .todays-coffee-section {
    margin-bottom: 1.5rem;
  }

  .todays-coffee-heading {
    margin-top: 0;
    margin-bottom: 1rem;
    color: var(--pico-h2-color);
    font-size: 1.5rem;
  }

  .todays-coffee-empty {
    text-align: center;
    padding: 2rem 1rem;
    color: var(--pico-muted-color);
  }

  .empty-icon {
    font-size: 2.5rem;
    margin-bottom: 0.75rem;
  }

  .coffee-entry {
    padding: 0;
  }

  .coffee-divider {
    border: none;
    border-top: 1px solid var(--pico-muted-border-color);
    margin: 1rem 0;
  }

  .coffee-time {
    font-size: 0.8125rem;
    color: var(--pico-muted-color);
    margin-bottom: 0.5rem;
    font-weight: 500;
  }

  .coffee-method-bean {
    margin-bottom: 0.75rem;
  }

  .coffee-method {
    font-size: 1.125rem;
    font-weight: 600;
    color: var(--pico-color);
  }

  .coffee-bean {
    font-size: 0.9375rem;
    color: var(--pico-muted-color);
  }

  .coffee-metrics {
    font-family: monospace;
    font-size: 0.875rem;
    margin-bottom: 0.75rem;
    line-height: 1.5;
    color: var(--pico-color);
  }

  .coffee-metrics div {
    margin-bottom: 0.25rem;
  }

  .coffee-metrics div:last-child {
    margin-bottom: 0;
  }

  .coffee-rating {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    margin-bottom: 0;
  }

  .stars {
    font-size: 1rem;
  }

  .rating-text {
    font-weight: 600;
    color: var(--pico-color);
    font-size: 0.9375rem;
  }

  .coffee-notes {
    color: var(--pico-muted-color);
    font-style: italic;
    margin-top: 0.5rem;
  }

  @media (max-width: 768px) {
    .todays-coffee-section {
      margin-bottom: 1rem;
    }

    .todays-coffee-heading {
      font-size: 1.375rem;
    }
  }

  /* 3. HERO STATS CARDS */
  .hero-stats-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
    gap: 1rem;
    margin-bottom: 2rem;
  }

  .hero-stat-card {
    background: var(--pico-card-background-color);
    border: 1px solid var(--pico-card-border-color);
    border-radius: var(--pico-border-radius);
    padding: 1rem;
    text-align: center;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
  }

  .stat-icon {
    font-size: 1.5rem;
    margin-bottom: 0.25rem;
  }

  .hero-stat-card .stat-value {
    font-size: 2rem;
    font-weight: 700;
    color: var(--pico-color);
    margin: 0.25rem 0;
    line-height: 1;
  }

  .hero-stat-card small {
    display: block;
    color: var(--pico-muted-color);
    font-weight: 500;
    font-size: 0.8125rem;
  }

  @media (max-width: 768px) {
    .hero-stats-grid {
      grid-template-columns: repeat(3, 1fr);
      gap: 0.75rem;
      margin-bottom: 1.5rem;
    }

    .hero-stat-card {
      padding: 0.875rem 0.5rem;
    }

    .stat-icon {
      font-size: 1.25rem;
    }

    .hero-stat-card .stat-value {
      font-size: 1.75rem;
    }

    .hero-stat-card small {
      font-size: 0.75rem;
    }
  }

  /* 4. MY SETUP */
  .my-setup-section {
    background: var(--pico-card-background-color);
    border: 1px solid var(--pico-card-border-color);
    border-radius: var(--pico-border-radius);
    padding: 2rem;
    margin-bottom: 3rem;
  }

  .my-setup-section h2 {
    margin-top: 0;
    margin-bottom: 1.5rem;
  }

  .setup-list {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .setup-item {
    color: var(--pico-color);
  }

  .setup-item strong {
    color: var(--pico-color);
    margin-right: 0.5rem;
  }

  @media (max-width: 768px) {
    .my-setup-section {
      padding: 1.5rem;
      margin-bottom: 2rem;
    }
  }

  /* 5. BREW METHOD DISTRIBUTION */
  .brew-method-section {
    background: var(--pico-card-background-color);
    border: 1px solid var(--pico-card-border-color);
    border-radius: var(--pico-border-radius);
    padding: 2rem;
    margin-bottom: 3rem;
  }

  .brew-method-section h2 {
    margin-top: 0;
    margin-bottom: 1.5rem;
  }

  .brew-method-bars {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }

  .bar-container {
    display: grid;
    grid-template-columns: 120px 1fr auto;
    gap: 1rem;
    align-items: center;
  }

  .method-name {
    font-weight: 600;
    color: var(--pico-color);
  }

  .bar-wrapper {
    background: var(--pico-background-color);
    border-radius: 0.25rem;
    height: 36px;
    overflow: hidden;
  }

  .bar {
    height: 100%;
    border-radius: 0.25rem;
    transition: width 0.3s ease;
    min-width: 2%;
  }

  .bar[data-method='espresso'] {
    background: #6f4e37;
  }

  .bar[data-method='aeropress'] {
    background: #8b6f47;
  }

  .bar[data-method='french press'] {
    background: #a0826d;
  }

  [data-theme='dark'] .bar[data-method='espresso'] {
    background: #9d6f4f;
  }

  [data-theme='dark'] .bar[data-method='aeropress'] {
    background: #b88d5f;
  }

  [data-theme='dark'] .bar[data-method='french press'] {
    background: #c4a47f;
  }

  .bar-container .stats {
    font-family: monospace;
    font-size: 0.875rem;
    color: var(--pico-muted-color);
    white-space: nowrap;
  }

  @media (max-width: 768px) {
    .brew-method-section {
      padding: 1.5rem;
      margin-bottom: 2rem;
    }

    .bar-container {
      grid-template-columns: 1fr;
      gap: 0.5rem;
    }

    .bar-wrapper {
      order: 2;
    }

    .stats {
      order: 3;
      text-align: right;
    }
  }

  /* 6. RECENT LOGS TABLE */
  .recent-logs-section {
    margin-bottom: 3rem;
  }

  .recent-logs-section h2 {
    margin-bottom: 1.5rem;
  }

  @media (max-width: 768px) {
    .recent-logs-section {
      margin-bottom: 2rem;
    }

    table {
      font-size: 0.875rem;
    }

    th,
    td {
      padding: 0.5rem 0.25rem;
    }
  }

  /* General spacing adjustments */
  @media (max-width: 768px) {
    section {
      margin-bottom: 2rem;
    }
  }
</style>
