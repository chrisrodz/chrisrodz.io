---
import Layout from '../layouts/Layout.astro';
import { supabase } from '../lib/supabase';
import type { CoffeeLogWithBean } from '../lib/schemas/cafe';
import {
  calculateStats,
  getBrewMethodDistribution,
  getQualityOverTime,
  getMostUsedBeans,
  formatBrewRatio,
} from '../lib/cafe-stats';
import BrewMethodChart from '../components/cafe/BrewMethodChart';
import QualityChart from '../components/cafe/QualityChart';
import { getLocaleFromUrl, useTranslations } from '@/lib/i18n';

const locale = getLocaleFromUrl(Astro.url);
const { t, formatDate } = useTranslations(locale);
const localeWithRegion = locale === 'es' ? 'es-PR' : 'en-US';
const puertoRicoTimeFormatter = new Intl.DateTimeFormat(localeWithRegion, {
  hour: 'numeric',
  minute: '2-digit',
  hour12: true,
  timeZone: 'America/Puerto_Rico',
});

// Fetch all coffee logs with bean details
let logs: CoffeeLogWithBean[] = [];
let error: string | null = null;

if (!supabase) {
  error = 'Database not configured';
} else {
  try {
    const { data, error: fetchError } = await supabase
      .from('coffee_logs')
      .select('*, bean:coffee_beans(*)')
      .order('brew_time', { ascending: false })
      .limit(100); // Limit to recent 100 logs for performance

    if (fetchError) throw fetchError;
    logs = (data || []) as CoffeeLogWithBean[];
  } catch (e) {
    console.error('Error fetching coffee logs:', e);
    error = 'Failed to load coffee logs';
  }
}

// Get today's coffee logs
const today = new Date();
today.setHours(0, 0, 0, 0);
const todaysCoffee = logs.filter((log) => {
  const logDate = new Date(log.brew_time);
  logDate.setHours(0, 0, 0, 0);
  return logDate.getTime() === today.getTime();
});

// Calculate statistics
const stats = logs.length > 0 ? calculateStats(logs) : null;
const brewMethodData = logs.length > 0 ? getBrewMethodDistribution(logs) : [];
const qualityData = logs.length > 0 ? getQualityOverTime(logs) : [];
const topBeans = logs.length > 0 ? getMostUsedBeans(logs) : [];
const recentLogs = logs.slice(0, 30); // Show last 30

// Calculate average dose for hero stats
const avgDose =
  logs.length > 0 ? logs.reduce((sum, log) => sum + (log.dose_grams || 0), 0) / logs.length : 0;

// Helper function to format Puerto Rico time
function formatPuertoRicoTime(date: Date): string {
  return puertoRicoTimeFormatter.format(date);
}

// Helper function to calculate brew ratio
function calculateRatio(dose: number | null, yield_grams: number | null): string {
  if (!dose || !yield_grams) return '-';
  return `1:${(yield_grams / dose).toFixed(1)}`;
}
---

<Layout title={t('cafe.title')} description={t('cafe.metaDescription')}>
  {
    error ? (
      <section class="notice-box" data-variant="warning">
        <h2>{t('cafe.errors.heading')}</h2>
        <p>
          {error === 'Database not configured'
            ? t('cafe.errors.notConfigured')
            : t('cafe.errors.failed')}
        </p>
      </section>
    ) : logs.length === 0 ? (
      <section class="notice-box" data-variant="info">
        <h2>{t('cafe.noLogsYet.heading')}</h2>
        <p>{t('cafe.noLogsYet.message')}</p>
      </section>
    ) : (
      <>
        {/* 1. WHY I'M TRACKING THIS */}
        <section class="coffee-why-section">
          <p class="coffee-why-text">{t('cafe.why.text')}</p>
        </section>

        {/* 2. TODAY'S COFFEE HERO CARD */}
        <section class="todays-coffee-section">
          <h2 class="todays-coffee-heading">{t('cafe.todaysCoffee.heading')}</h2>
          {todaysCoffee.length === 0 ? (
            <div class="todays-coffee-empty">
              <p>{t('cafe.todaysCoffee.emptyHeading')}</p>
              <small>{t('cafe.todaysCoffee.emptyMessage')}</small>
            </div>
          ) : (
            <div class="todays-coffee-list">
              {todaysCoffee.map((log, index) => {
                const brewDate = new Date(log.brew_time);
                const isoString = brewDate.toISOString();

                return (
                  <>
                    {index > 0 && <hr class="coffee-divider" />}
                    <article class="coffee-entry">
                      <header class="coffee-entry-header">
                        <span class="time-compare time-compare--badge" data-local-time={isoString}>
                          <span class="time-compare__zone">
                            <span class="time-compare__value">
                              {formatPuertoRicoTime(brewDate)}
                            </span>
                            <small class="time-compare__label">
                              {t('cafe.timeComparison.puertoRico')}
                            </small>
                          </span>
                          <span class="time-compare__zone time-compare__zone--local">
                            <span class="time-compare__value" data-local-time-display>
                              {t('common.loading')}
                            </span>
                            <small class="time-compare__label">
                              {t('cafe.timeComparison.local')}
                            </small>
                          </span>
                        </span>
                        <div class="coffee-method-bean">
                          <span class="coffee-method">{log.brew_method}</span>
                          <span class="coffee-bean">
                            {log.bean?.bean_name || t('cafe.misc.unknown')}
                          </span>
                        </div>
                      </header>

                      <div class="coffee-metrics">
                        <div class="metric-block">
                          <span class="metric-label">{t('cafe.todaysCoffee.ratio')}</span>
                          <span class="metric-value">
                            {log.dose_grams}g → {log.yield_grams}g ·{' '}
                            {calculateRatio(log.dose_grams, log.yield_grams)}
                          </span>
                        </div>
                        <div class="metric-block">
                          <span class="metric-label">{t('cafe.todaysCoffee.grind')}</span>
                          <span class="metric-value">{log.grind_setting}</span>
                        </div>
                      </div>

                      <div
                        class="coffee-rating"
                        role="group"
                        aria-label={`${t('cafe.table.rating')}: ${log.quality_rating} out of 5`}
                      >
                        <span class="rating-badge" aria-hidden="true">
                          {log.quality_rating} / 5
                        </span>
                        <span class="rating-text">
                          {log.quality_rating === 5
                            ? t('cafe.todaysCoffee.dialedIn')
                            : log.quality_rating >= 4
                              ? t('cafe.todaysCoffee.greatShot')
                              : log.quality_rating >= 3
                                ? t('cafe.todaysCoffee.decent')
                                : t('cafe.todaysCoffee.needsWork')}
                        </span>
                      </div>

                      {log.notes && (
                        <div class="coffee-notes">
                          <span class="notes-label">{t('cafe.todaysCoffee.notes')}</span>
                          <span class="notes-text">
                            {log.notes.substring(0, 120)}
                            {log.notes.length > 120 ? '…' : ''}
                          </span>
                        </div>
                      )}
                    </article>
                  </>
                );
              })}
            </div>
          )}
        </section>

        {/* 3. HERO STATS CARDS */}
        <div class="hero-stats-grid">
          <article class="hero-stat-card">
            <p class="stat-value">{stats?.totalLogs}</p>
            <small>{t('cafe.stats.totalLogs')}</small>
          </article>
          <article class="hero-stat-card">
            <p class="stat-value">{stats?.avgRating}</p>
            <small>{t('cafe.stats.avgRating')}</small>
          </article>
          <article class="hero-stat-card">
            <p class="stat-value">{avgDose.toFixed(1)}g</p>
            <small>{t('cafe.stats.avgDose')}</small>
          </article>
        </div>
        {/* 4. BREW METHOD DISTRIBUTION - Visual Bar Chart */}
        <section class="brew-method-section">
          <h2>{t('cafe.sections.brewMethods')}</h2>
          <div class="brew-method-bars">
            {brewMethodData.map((method) => {
              const percentage = stats ? ((method.count / stats.totalLogs) * 100).toFixed(0) : '0';
              return (
                <div class="bar-container">
                  <span class="method-name">{method.method}</span>
                  <div class="bar-wrapper">
                    <div
                      class="bar"
                      style={`width: ${percentage}%`}
                      data-method={method.method.toLowerCase()}
                    />
                  </div>
                  <span class="stats">
                    {percentage}% ({method.count})
                  </span>
                </div>
              );
            })}
          </div>
        </section>

        {/* 5. RECENT LOGS */}
        <section class="recent-logs-section">
          <h2>{t('cafe.sections.recentBrews')}</h2>
          <div class="recent-logs-list">
            {recentLogs.map((log) => {
              const brewDate = new Date(log.brew_time);
              const isoString = brewDate.toISOString();

              return (
                <article class="recent-log-card">
                  <header class="recent-log-header">
                    <div class="recent-log-meta">
                      <span class="recent-log-date">
                        {formatDate(brewDate, {
                          month: 'short',
                          day: 'numeric',
                        })}
                      </span>
                      <span class="time-compare time-compare--subtle" data-local-time={isoString}>
                        <span class="time-compare__zone">
                          <span class="time-compare__value">{formatPuertoRicoTime(brewDate)}</span>
                          <small class="time-compare__label">
                            {t('cafe.timeComparison.puertoRico')}
                          </small>
                        </span>
                        <span class="time-compare__zone time-compare__zone--local">
                          <span class="time-compare__value" data-local-time-display>
                            {t('common.loading')}
                          </span>
                          <small class="time-compare__label">
                            {t('cafe.timeComparison.local')}
                          </small>
                        </span>
                      </span>
                    </div>
                    <span class="recent-log-method">{log.brew_method}</span>
                  </header>

                  <dl class="recent-log-details">
                    <div class="detail-item">
                      <dt>{t('cafe.table.bean')}</dt>
                      <dd>{log.bean?.bean_name || t('cafe.misc.unknown')}</dd>
                    </div>
                    <div class="detail-item">
                      <dt>{t('cafe.table.ratio')}</dt>
                      <dd>{formatBrewRatio(log.dose_grams, log.yield_grams)}</dd>
                    </div>
                    <div class="detail-item">
                      <dt>{t('cafe.table.grind')}</dt>
                      <dd>{log.grind_setting}</dd>
                    </div>
                    <div class="detail-item">
                      <dt>{t('cafe.table.rating')}</dt>
                      <dd>{log.quality_rating} / 5</dd>
                    </div>
                  </dl>
                </article>
              );
            })}
          </div>
        </section>
      </>
    )
  }
</Layout>

<script is:inline>
  (() => {
    const updateLocalTimes = () => {
      const localFormatter = new Intl.DateTimeFormat(undefined, {
        hour: 'numeric',
        minute: '2-digit',
        hour12: true,
      });

      const prFormatter = new Intl.DateTimeFormat(undefined, {
        hour: 'numeric',
        minute: '2-digit',
        hour12: true,
        timeZone: 'America/Puerto_Rico',
      });

      document.querySelectorAll('[data-local-time]').forEach((element) => {
        const iso = element.getAttribute('data-local-time');
        if (!iso) return;

        const date = new Date(iso);
        if (Number.isNaN(date.getTime())) return;

        const localTime = localFormatter.format(date);
        const prTime = prFormatter.format(date);

        // Update local time display
        element.querySelectorAll('[data-local-time-display]').forEach((target) => {
          target.textContent = localTime;
        });

        // Hide local time zone if it matches Puerto Rico time
        if (localTime === prTime) {
          element.querySelectorAll('.time-compare__zone--local').forEach((zone) => {
            zone.style.display = 'none';
          });
        }
      });
    };

    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', updateLocalTimes, { once: true });
    } else {
      updateLocalTimes();
    }
  })();
</script>

<style>
  /* 1. WHY I'M TRACKING THIS */
  .coffee-why-section {
    margin-bottom: 2rem;
    text-align: center;
    padding: 1rem 0;
  }

  .coffee-why-text {
    color: var(--pico-muted-color);
    line-height: 1.6;
    margin: 0;
    font-size: 0.9375rem;
    margin-left: auto;
    margin-right: auto;
    font-style: italic;
  }

  @media (max-width: 768px) {
    .coffee-why-section {
      margin-bottom: 1.5rem;
    }

    .coffee-why-text {
      font-size: 0.875rem;
    }
  }

  /* 2. TODAY'S COFFEE HERO CARD */
  .todays-coffee-section {
    position: relative;
    background:
      linear-gradient(135deg, rgba(111, 78, 55, 0.12), transparent 55%),
      var(--pico-card-background-color);
    border: 1px solid var(--pico-card-border-color);
    border-radius: calc(var(--pico-border-radius) * 1.25);
    padding: clamp(1.5rem, 5vw, 2.75rem);
    margin-bottom: 2.5rem;
    box-shadow: 0 18px 40px rgba(15, 23, 42, 0.08);
    overflow: hidden;
  }

  .todays-coffee-section::after {
    content: '';
    position: absolute;
    inset: 0;
    pointer-events: none;
    background: radial-gradient(circle at top right, rgba(255, 255, 255, 0.25), transparent 60%);
    opacity: 0.7;
  }

  .todays-coffee-heading {
    position: relative;
    z-index: 1;
    margin-top: 0;
    margin-bottom: 2rem;
    color: var(--pico-h2-color);
    font-size: clamp(1.6rem, 5vw, 2.4rem);
    letter-spacing: -0.01em;
  }

  .todays-coffee-list {
    position: relative;
    z-index: 1;
    display: flex;
    flex-direction: column;
    gap: 2rem;
  }

  .todays-coffee-empty {
    text-align: center;
    padding: 2rem 1rem;
    color: var(--pico-muted-color);
  }

  .coffee-divider {
    border: none;
    border-top: 1px dashed var(--pico-muted-border-color);
    margin: 0;
    opacity: 0.35;
    align-self: stretch;
  }

  .coffee-entry {
    display: grid;
    gap: 1.5rem;
  }

  .coffee-entry-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-wrap: wrap;
    gap: 0.75rem 1.5rem;
  }

  .time-compare {
    display: inline-flex;
    align-items: stretch;
    gap: 0.85rem;
    flex-wrap: wrap;
  }

  .time-compare--badge {
    padding: 0.5rem 0.9rem;
    border-radius: var(--pico-border-radius);
    background: #6f4e37;
    color: #fff7f0;
  }

  [data-theme='dark'] .time-compare--badge {
    background: #b88d5f;
    color: #1c1108;
  }

  .time-compare__zone {
    display: flex;
    flex-direction: column;
    gap: 0.2rem;
    min-width: fit-content;
  }

  .time-compare__value {
    font-weight: 600;
    letter-spacing: 0.04em;
    font-size: clamp(0.8rem, 2vw, 0.95rem);
    text-transform: uppercase;
  }

  .time-compare__label {
    display: block;
    text-transform: uppercase;
    letter-spacing: 0.12em;
    font-weight: 600;
    font-size: 0.65rem;
    opacity: 0.7;
  }

  .time-compare--badge .time-compare__value {
    font-size: clamp(0.85rem, 1.6vw, 0.95rem);
  }

  .time-compare--badge .time-compare__zone--local .time-compare__value {
    opacity: 0.85;
  }

  .time-compare--subtle {
    color: var(--pico-muted-color);
    gap: 0.75rem;
  }

  .time-compare--subtle .time-compare__value {
    font-size: 0.85rem;
    letter-spacing: 0.08em;
  }

  .time-compare--subtle .time-compare__label {
    font-size: 0.6rem;
    opacity: 0.6;
  }

  @media (max-width: 480px) {
    .time-compare {
      gap: 0.65rem;
    }
  }

  .coffee-method-bean {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
  }

  .coffee-method {
    font-size: clamp(1.125rem, 3vw, 1.5rem);
    font-weight: 700;
    color: var(--pico-color);
    letter-spacing: -0.01em;
  }

  .coffee-bean {
    font-size: clamp(0.95rem, 2vw, 1.05rem);
    color: var(--pico-muted-color);
  }

  .coffee-metrics {
    display: grid;
    gap: 1rem;
    grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
  }

  .metric-block {
    display: flex;
    flex-direction: column;
    gap: 0.35rem;
    padding: 0.9rem 1rem;
    border-radius: 0.9rem;
    background: var(--pico-background-color);
    border: 1px solid var(--pico-muted-border-color);
    min-height: 82px;
  }

  .metric-label {
    text-transform: uppercase;
    font-size: 0.75rem;
    letter-spacing: 0.1em;
    color: var(--pico-muted-color);
  }

  .metric-value {
    font-family:
      'JetBrains Mono', 'Fira Code', ui-monospace, SFMono-Regular, Monaco, Consolas,
      'Liberation Mono', 'Courier New', monospace;
    font-size: clamp(0.95rem, 2.4vw, 1.05rem);
    color: var(--pico-color);
  }

  .coffee-rating {
    display: flex;
    flex-wrap: wrap;
    align-items: center;
    gap: 0.75rem;
  }

  .rating-badge {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    padding: 0.4rem 0.85rem;
    border-radius: 999px;
    background: #6f4e37;
    color: #fff7f0;
    font-weight: 700;
    letter-spacing: 0.08em;
    font-size: 0.85rem;
  }

  [data-theme='dark'] .rating-badge {
    background: #b88d5f;
    color: #1c1108;
  }

  .rating-text {
    font-weight: 600;
    color: var(--pico-color);
    font-size: clamp(0.95rem, 2vw, 1.05rem);
  }

  .coffee-notes {
    display: grid;
    gap: 0.35rem;
    padding: 1rem 1.25rem;
    border-radius: 0.9rem;
    border: 1px dashed var(--pico-muted-border-color);
    background: var(--pico-card-background-color);
  }

  .notes-label {
    font-size: 0.75rem;
    letter-spacing: 0.1em;
    text-transform: uppercase;
    color: var(--pico-muted-color);
  }

  .notes-text {
    font-size: 0.9rem;
    line-height: 1.6;
    color: var(--pico-muted-color);
  }

  @media (max-width: 768px) {
    .todays-coffee-section {
      margin-bottom: 1.5rem;
    }
  }

  /* 3. HERO STATS CARDS */
  .hero-stats-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
    gap: 1rem;
    margin-bottom: 2rem;
  }

  .hero-stat-card {
    background: var(--pico-card-background-color);
    border: 1px solid var(--pico-card-border-color);
    border-radius: var(--pico-border-radius);
    padding: 1.25rem 1rem;
    text-align: center;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
    transition:
      transform 0.2s ease,
      box-shadow 0.2s ease;
  }

  .hero-stat-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.08);
  }

  .hero-stat-card .stat-value {
    font-size: 2rem;
    font-weight: 700;
    color: var(--pico-color);
    margin: 0.25rem 0;
    line-height: 1;
  }

  .hero-stat-card small {
    display: block;
    color: var(--pico-muted-color);
    font-weight: 500;
    font-size: 0.8125rem;
  }

  @media (max-width: 768px) {
    .hero-stats-grid {
      grid-template-columns: repeat(3, 1fr);
      gap: 0.75rem;
      margin-bottom: 1.5rem;
    }

    .hero-stat-card {
      padding: 0.875rem 0.5rem;
    }

    .hero-stat-card .stat-value {
      font-size: 1.75rem;
    }

    .hero-stat-card small {
      font-size: 0.75rem;
    }
  }

  /* 4. BREW METHOD DISTRIBUTION */
  .brew-method-section {
    background: var(--pico-card-background-color);
    border: 1px solid var(--pico-card-border-color);
    border-radius: var(--pico-border-radius);
    padding: 2rem;
    margin-bottom: 3rem;
  }

  .brew-method-section h2 {
    margin-top: 0;
    margin-bottom: 1.5rem;
  }

  .brew-method-bars {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }

  .bar-container {
    display: grid;
    grid-template-columns: 120px 1fr auto;
    gap: 1rem;
    align-items: center;
  }

  .method-name {
    font-weight: 600;
    color: var(--pico-color);
  }

  .bar-wrapper {
    background: var(--pico-background-color);
    border-radius: 0.25rem;
    height: 36px;
    overflow: hidden;
  }

  .bar {
    height: 100%;
    border-radius: 0.25rem;
    transition: width 0.3s ease;
    min-width: 2%;
  }

  .bar[data-method='espresso'] {
    background: #6f4e37;
  }

  .bar[data-method='aeropress'] {
    background: #8b6f47;
  }

  .bar[data-method='french press'] {
    background: #a0826d;
  }

  [data-theme='dark'] .bar[data-method='espresso'] {
    background: #9d6f4f;
  }

  [data-theme='dark'] .bar[data-method='aeropress'] {
    background: #b88d5f;
  }

  [data-theme='dark'] .bar[data-method='french press'] {
    background: #c4a47f;
  }

  .bar-container .stats {
    font-family: monospace;
    font-size: 0.875rem;
    color: var(--pico-muted-color);
    white-space: nowrap;
  }

  @media (max-width: 768px) {
    .brew-method-section {
      padding: 1.5rem;
      margin-bottom: 2rem;
    }

    .bar-container {
      grid-template-columns: 1fr;
      gap: 0.5rem;
    }

    .bar-wrapper {
      order: 2;
    }

    .stats {
      order: 3;
      text-align: right;
    }
  }

  /* 5. RECENT LOGS */
  .recent-logs-section {
    margin-bottom: 3rem;
  }

  .recent-logs-section h2 {
    margin-bottom: 1.75rem;
  }

  .recent-logs-list {
    display: grid;
    gap: 1.5rem;
  }

  .recent-log-card {
    display: grid;
    gap: 1.25rem;
    padding: 1.5rem;
    border-radius: var(--pico-border-radius);
    border: 1px solid var(--pico-card-border-color);
    background: var(--pico-card-background-color);
    box-shadow: 0 10px 24px rgba(15, 23, 42, 0.06);
  }

  .recent-log-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 1rem;
    flex-wrap: wrap;
  }

  .recent-log-meta {
    display: flex;
    flex-direction: column;
    gap: 0.4rem;
  }

  .recent-log-date {
    font-weight: 700;
    font-size: 1rem;
    color: var(--pico-color);
    letter-spacing: 0.04em;
    text-transform: uppercase;
  }

  .recent-log-method {
    padding: 0.35rem 0.75rem;
    border-radius: 999px;
    background: rgba(111, 78, 55, 0.12);
    color: #5c3b25;
    font-weight: 600;
    font-size: 0.85rem;
    letter-spacing: 0.08em;
    text-transform: uppercase;
  }

  [data-theme='dark'] .recent-log-method {
    background: rgba(157, 111, 79, 0.2);
    color: rgba(255, 235, 219, 0.92);
  }

  .recent-log-details {
    display: grid;
    gap: 1rem;
  }

  .detail-item {
    display: grid;
    gap: 0.35rem;
  }

  .detail-item dt {
    font-size: 0.75rem;
    letter-spacing: 0.1em;
    text-transform: uppercase;
    color: var(--pico-muted-color);
  }

  .detail-item dd {
    margin: 0;
    font-size: 0.95rem;
    color: var(--pico-color);
    font-weight: 500;
  }

  @media (min-width: 768px) {
    .recent-logs-list {
      grid-template-columns: repeat(auto-fill, minmax(260px, 1fr));
    }

    .recent-log-details {
      grid-template-columns: repeat(2, minmax(0, 1fr));
      gap: 1.25rem 1.5rem;
    }
  }

  @media (max-width: 768px) {
    .recent-logs-section {
      margin-bottom: 2.25rem;
    }

    .recent-log-card {
      padding: 1.25rem;
    }
  }

  /* General spacing adjustments */
  @media (max-width: 768px) {
    section {
      margin-bottom: 2rem;
    }
  }
</style>
