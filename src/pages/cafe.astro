---
import Layout from '../layouts/Layout.astro';
import ErrorState from '@/components/cafe/ErrorState.astro';
import EmptyState from '@/components/cafe/EmptyState.astro';
import WhyTracking from '@/components/cafe/WhyTracking.astro';
import TodaysCoffeeCard from '@/components/cafe/TodaysCoffeeCard.astro';
import StatsCards from '@/components/cafe/StatsCards.astro';
import BrewDistribution from '@/components/cafe/BrewDistribution.astro';
import RecentLogs from '@/components/cafe/RecentLogs.astro';
import { supabase } from '../lib/supabase';
import type { CoffeeLogWithBean } from '../lib/schemas/cafe';
import { calculateStats, getBrewMethodDistribution } from '../lib/cafe-stats';
import { getLocaleFromUrl, useTranslations } from '@/lib/i18n';

const locale = getLocaleFromUrl(Astro.url);
const { t } = useTranslations(locale);

// Fetch all coffee logs with bean details
let logs: CoffeeLogWithBean[] = [];
let error: string | null = null;

if (!supabase) {
  error = 'Database not configured';
} else {
  try {
    const { data, error: fetchError } = await supabase
      .from('coffee_logs')
      .select('*, bean:coffee_beans(*)')
      .order('brew_time', { ascending: false })
      .limit(100);

    if (fetchError) throw fetchError;
    logs = (data || []) as CoffeeLogWithBean[];
  } catch (e) {
    console.error('Error fetching coffee logs:', e);
    error = 'Failed to load coffee logs';
  }
}

// Get today's coffee logs
const today = new Date();
today.setHours(0, 0, 0, 0);
const todaysCoffee = logs.filter((log) => {
  const logDate = new Date(log.brew_time);
  logDate.setHours(0, 0, 0, 0);
  return logDate.getTime() === today.getTime();
});

// Calculate statistics
const stats = logs.length > 0 ? calculateStats(logs) : null;
const brewMethodData = logs.length > 0 ? getBrewMethodDistribution(logs) : [];
const recentLogs = logs.slice(0, 30);

// Calculate average dose for hero stats
const avgDose =
  logs.length > 0 ? logs.reduce((sum, log) => sum + (log.dose_grams || 0), 0) / logs.length : 0;
---

<Layout title={t('cafe.title')} description={t('cafe.metaDescription')}>
  {
    error ? (
      <ErrorState error={error} locale={locale} />
    ) : logs.length === 0 ? (
      <EmptyState locale={locale} />
    ) : (
      <>
        <WhyTracking locale={locale} />
        <TodaysCoffeeCard todaysCoffee={todaysCoffee} locale={locale} />
        {stats && (
          <StatsCards
            totalLogs={stats.totalLogs}
            avgRating={stats.avgRating}
            avgDose={avgDose}
            locale={locale}
          />
        )}
        <BrewDistribution distribution={brewMethodData} locale={locale} />
        <RecentLogs logs={recentLogs} locale={locale} />
      </>
    )
  }
</Layout>
