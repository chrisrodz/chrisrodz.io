---
import { getCollection, render } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import { getTranslatedPost, getBlogPostUrl, getLocaleFromUrl, useTranslations } from '@/lib/i18n';

const locale = getLocaleFromUrl(Astro.url);
const { t, formatDate } = useTranslations(locale);

// Get the slug from the URL params
const { slug } = Astro.params;

if (!slug) {
  return Astro.redirect('/404');
}

// Find the blog post by slug field for the current locale
const allPosts = await getCollection('blog');
const entry = allPosts.find((post) => post.data.slug === slug && post.data.locale === locale);

if (!entry) {
  return Astro.redirect('/404');
}

const { Content } = await render(entry);
const post = entry;

// Check if English translation exists and get its URL
const translatedPost = await getTranslatedPost(post, 'en');
const alternateUrl = translatedPost ? getBlogPostUrl(translatedPost) : undefined;

// Format date
const formattedDate = formatDate(post.data.pubDate, {
  year: 'numeric',
  month: 'long',
  day: 'numeric',
});

// Structured data for SEO
const structuredData = {
  '@context': 'https://schema.org',
  '@type': 'BlogPosting',
  headline: post.data.title,
  description: post.data.description,
  datePublished: post.data.pubDate.toISOString(),
  dateModified: post.data.updatedDate?.toISOString() || post.data.pubDate.toISOString(),
  author: {
    '@type': 'Person',
    name: 'Christian Rodriguez',
    url: 'https://chrisrodz.io',
  },
  publisher: {
    '@type': 'Person',
    name: 'Christian Rodriguez',
    url: 'https://chrisrodz.io',
  },
  inLanguage: locale,
  url: new URL(getBlogPostUrl(post), Astro.site || 'https://chrisrodz.io').toString(),
  mainEntityOfPage: {
    '@type': 'WebPage',
    '@id': new URL(getBlogPostUrl(post), Astro.site || 'https://chrisrodz.io').toString(),
  },
  keywords: post.data.category,
};
---

<Layout title={post.data.title} description={post.data.description} alternateUrl={alternateUrl}>
  <!-- Structured Data -->
  <script type="application/ld+json" is:inline set:html={JSON.stringify(structuredData)} />
  <article style="max-width: 70ch; margin: 0 auto;">
    <header style="margin-bottom: 3rem;">
      <nav style="margin-bottom: 1.5rem;">
        <a
          href={locale === 'en' ? '/en' : '/'}
          style="text-decoration: none; color: var(--pico-muted-color); font-weight: 500; font-size: 0.9375rem;"
        >
          ← {t('blog.backToHome')}
        </a>
      </nav>

      <h1
        style="font-size: clamp(2rem, 4vw, 2.5rem); font-weight: 800; letter-spacing: -0.05em; line-height: 1.2; margin-bottom: 1rem;"
      >
        {post.data.title}
      </h1>

      <div
        style="display: flex; gap: 1.5rem; align-items: center; color: var(--pico-muted-color); font-size: 0.9375rem;"
      >
        <time datetime={post.data.pubDate.toISOString()}>
          {formattedDate}
        </time>
      </div>

      {
        post.data.description && (
          <p style="margin-top: 1.5rem; font-size: 1.125rem; color: var(--pico-muted-color); line-height: 1.6;">
            {post.data.description}
          </p>
        )
      }
    </header>

    <div class="prose">
      <Content />
    </div>
  </article>

  <div style="max-width: 70ch; margin: 3rem auto 0;">
    <hr style="margin: 3rem 0;" />
    <nav>
      <a href={locale === 'en' ? '/en' : '/'} role="button" class="secondary">
        ← {t('blog.backToHome')}
      </a>
    </nav>
  </div>
</Layout>
