---
import Layout from '../../layouts/Layout.astro';
import { checkAuth, verifyAdminSecret, createSession, setAuthCookie } from '../../lib/auth';
import {
  getRateLimitState,
  recordFailedAttempt,
  resetRateLimit,
  type RateLimiterOptions,
} from '../../lib/rate-limit';

export const prerender = false;

const cookies = Astro.cookies;
const isAuthed = checkAuth(cookies);
let loginError = '';
const logoutNotice = Astro.url.searchParams.get('logout') === 'success'
  ? 'You have been logged out successfully.'
  : '';

const RATE_LIMIT_OPTIONS: RateLimiterOptions = {
  maxAttempts: 5,
  windowMs: 10 * 60 * 1000, // 10 minutes
  cooldownMs: 15 * 60 * 1000, // 15 minutes cooldown after max attempts
};

const headers = Astro.request.headers;

function getClientIdentifier(): string {
  const forwardedFor = headers.get('x-forwarded-for');
  if (forwardedFor) {
    const first = forwardedFor.split(',')[0]?.trim();
    if (first) return `ip:${first}`;
  }

  const realIp =
    headers.get('cf-connecting-ip') ||
    headers.get('x-real-ip') ||
    headers.get('x-client-ip') ||
    headers.get('forwarded');
  if (realIp) {
    return `ip:${realIp}`;
  }

  const sessionId = cookies.get('session_id')?.value;
  if (sessionId) {
    return `session:${sessionId}`;
  }

  const userAgent = headers.get('user-agent');
  if (userAgent) {
    return `ua:${userAgent}`;
  }

  return 'anonymous';
}

function setRetryAfterHeader(retryAfterMs?: number) {
  if (!retryAfterMs) return;
  const seconds = Math.max(1, Math.ceil(retryAfterMs / 1000));
  Astro.response.headers.set('Retry-After', String(seconds));
}

function formatCooldownMessage(retryAfterMs?: number) {
  const refreshHint = ' Refresh the page once the cooldown expires to try again.';
  if (!retryAfterMs) return `Too many login attempts. Please try again later.${refreshHint}`;
  const seconds = Math.max(1, Math.ceil(retryAfterMs / 1000));
  if (seconds < 60) {
    return `Too many login attempts. Please try again in ${seconds} seconds.${refreshHint}`;
  }
  const minutes = Math.ceil(seconds / 60);
  return `Too many login attempts. Please try again in ${minutes} minute${minutes === 1 ? '' : 's'}.${refreshHint}`;
}

const rateLimitKey = getClientIdentifier();
let rateLimitState = getRateLimitState(rateLimitKey, RATE_LIMIT_OPTIONS);

if (!rateLimitState.allowed) {
  setRetryAfterHeader(rateLimitState.retryAfter);
  loginError = formatCooldownMessage(rateLimitState.retryAfter);
}

// Handle login form submission
if (Astro.request.method === 'POST') {
  if (!rateLimitState.allowed) {
    Astro.response.status = 429;
    setRetryAfterHeader(rateLimitState.retryAfter);
    loginError = formatCooldownMessage(rateLimitState.retryAfter);
    console.warn(
      JSON.stringify({
        event: 'admin_login_blocked',
        reason: 'rate_limit_precheck',
        identifier: rateLimitKey,
        blockedUntil: rateLimitState.blockedUntil ?? null,
        retryAfterMs: rateLimitState.retryAfter ?? null,
      }),
    );
  } else {
    const formData = await Astro.request.formData();
    const password = formData.get('password') as string;

    if (verifyAdminSecret(password)) {
      resetRateLimit(rateLimitKey);
      const sessionId = createSession();
      setAuthCookie(cookies, sessionId);
      return Astro.redirect('/admin/cafe');
    } else {
      rateLimitState = recordFailedAttempt(rateLimitKey, RATE_LIMIT_OPTIONS);
      if (!rateLimitState.allowed) {
        Astro.response.status = 429;
        setRetryAfterHeader(rateLimitState.retryAfter);
        loginError = formatCooldownMessage(rateLimitState.retryAfter);
        console.warn(
          JSON.stringify({
            event: 'admin_login_blocked',
            reason: 'rate_limit_exceeded',
            identifier: rateLimitKey,
            blockedUntil: rateLimitState.blockedUntil ?? null,
            retryAfterMs: rateLimitState.retryAfter ?? null,
          }),
        );
      } else {
        loginError = 'Invalid password';
      }
    }
  }
}

const isRateLimited = !rateLimitState.allowed;
---

<Layout title="Admin Dashboard">
  {
    !isAuthed ? (
      <section>
        <h1>Admin Login</h1>
        {logoutNotice && (
          <div style="padding: 1rem; margin: 1rem 0; background: #efe; border-radius: 4px; color: #060;">
            {logoutNotice}
          </div>
        )}
        {loginError && (
          <div style="padding: 1rem; margin: 1rem 0; background: #fee; border-radius: 4px; color: #c00;">
            {loginError}
          </div>
        )}
        <form method="POST">
          <fieldset disabled={isRateLimited}>
            <label for="password">Admin Password</label>
            <input
              type="password"
              name="password"
              id="password"
              placeholder="Enter admin password"
              required
            />
            <button type="submit">Login</button>
          </fieldset>
        </form>
      </section>
    ) : (
      <section>
        <header class="mb">
          <h1>🗺️ Site Map</h1>
          <p style="color: var(--pico-muted-color);">
            Complete directory of all pages and admin tools
          </p>
        </header>

        <div class="grid-2 mb">
          {/* Public Pages - Spanish (Default) */}
          <article>
            <h3>📄 Páginas Públicas (Español)</h3>
            <ul style="list-style: none; padding: 0;">
              <li>
                <a href="/">🏠 Inicio</a>
              </li>
              <li>
                <a href="/blog">📝 Blog</a>
              </li>
              <li>
                <a href="/cafe">☕ Registro de Café</a>
              </li>
              <li>
                <a href="/training">🏃 Registro de Entrenamiento</a>
              </li>
              <li>
                <a href="/rss.xml">📡 RSS Feed (Español)</a>
              </li>
            </ul>
          </article>

          {/* Public Pages - English */}
          <article>
            <h3>📄 Public Pages (English)</h3>
            <ul style="list-style: none; padding: 0;">
              <li>
                <a href="/en">🏠 Home</a>
              </li>
              <li>
                <a href="/en/blog">📝 Blog</a>
              </li>
              <li>
                <a href="/en/cafe">☕ Coffee Tracker</a>
              </li>
              <li>
                <a href="/en/training">🏃 Training Log</a>
              </li>
              <li>
                <a href="/en/rss.xml">📡 RSS Feed (English)</a>
              </li>
            </ul>
          </article>

          {/* Admin Pages */}
          <article>
            <h3>🔧 Admin Tools</h3>
            <ul style="list-style: none; padding: 0;">
              <li>
                <a href="/admin">🗺️ Site Map (this page)</a>
              </li>
              <li>
                <a href="/admin/cafe">☕ Coffee Logger</a>
              </li>
              <li>
                <a href="/admin/logout">🚪 Logout</a>
              </li>
            </ul>
          </article>

          {/* External Resources */}
          <article>
            <h3>🔗 External Links</h3>
            <ul style="list-style: none; padding: 0;">
              <li>
                <a href="https://github.com/chrisrodz" target="_blank" rel="noopener noreferrer">
                  🐙 GitHub Profile
                </a>
              </li>
              <li>
                <a href="mailto:hey@chrisrodz.io">📧 Email</a>
              </li>
              <li>
                <a href="https://supabase.com/dashboard" target="_blank" rel="noopener noreferrer">
                  🗄️ Supabase Dashboard
                </a>
              </li>
              <li>
                <a href="https://vercel.com/dashboard" target="_blank" rel="noopener noreferrer">
                  ▲ Vercel Dashboard
                </a>
              </li>
            </ul>
          </article>
        </div>

        <details class="mb">
          <summary>💡 Quick Tips</summary>
          <div>
            <ul>
              <li>
                <strong>Coffee emoji (☕) in footer:</strong> Quick access to coffee logger when
                logged in
              </li>
              <li>
                <strong>RSS feeds:</strong> Available in both English and Spanish
              </li>
              <li>
                <strong>Database:</strong> Check Supabase dashboard for data management
              </li>
              <li>
                <strong>Deployment:</strong> Pushes to main branch auto-deploy via Vercel
              </li>
            </ul>
          </div>
        </details>

        <details>
          <summary>🛠️ Database Setup Instructions</summary>
          <div>
            <h4>Supabase Configuration</h4>
            <p>To get started with the coffee and training tracking features:</p>
            <ol>
              <li>
                Create a Supabase project at{' '}
                <a href="https://supabase.com" target="_blank">
                  supabase.com
                </a>
              </li>
              <li>Copy your project URL and anon key to your environment variables</li>
              <li>
                Run the SQL schema in <code>schema.sql</code> to create the required tables
              </li>
              <li>Update your environment variables and restart the application</li>
            </ol>

            <h4>Strava Integration</h4>
            <p>To sync training activities from Strava:</p>
            <ol>
              <li>
                Create a Strava application at{' '}
                <a href="https://developers.strava.com" target="_blank">
                  developers.strava.com
                </a>
              </li>
              <li>Set up OAuth and get your client credentials</li>
              <li>Add your Strava credentials to environment variables</li>
              <li>Implement the OAuth flow (coming soon)</li>
            </ol>
          </div>
        </details>
      </section>
    )
  }
</Layout>
