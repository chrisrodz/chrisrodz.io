---
import Layout from '../../layouts/Layout.astro';
import { checkAuth } from '../../lib/auth';
import { supabase } from '../../lib/supabase';
import { CoffeeLogSchema, CoffeeBeanSchema } from '../../lib/schemas/cafe';
import CoffeeLogForm from '../../components/cafe/CoffeeLogForm';
import type { CoffeeBeanRow } from '../../lib/schemas/cafe';
import type { BREW_METHODS } from '../../lib/schemas/cafe';

export const prerender = false;

// Check authentication
const isAuthed = checkAuth(Astro.cookies);
if (!isAuthed) {
  return Astro.redirect('/admin');
}

let message = '';
let messageType: 'success' | 'error' | null = null;

// Handle form submission
if (Astro.request.method === 'POST') {
  if (!supabase) {
    message = 'Error: Supabase is not configured';
    messageType = 'error';
  } else {
    try {
      const formData = await Astro.request.formData();
      const action = formData.get('action');

      if (action === 'add_bean') {
        // Parse and validate bean data
        const rawBeanData = {
          bean_name: formData.get('bean_name') as string,
          roaster: formData.get('roaster') || null,
          roast_date: formData.get('roast_date') || null,
          notes: formData.get('notes') || null,
          is_active: true,
        };

        const validatedBeanData = CoffeeBeanSchema.parse(rawBeanData);

        // Insert into database
        const { data: newBean, error } = await supabase
          .from('coffee_beans')
          .insert(validatedBeanData)
          .select()
          .single();

        if (error) throw error;

        // Check if this is an AJAX request (React component)
        const acceptHeader = Astro.request.headers.get('accept');
        if (acceptHeader?.includes('application/json')) {
          // Return JSON for React component
          return new Response(JSON.stringify({ bean: newBean }), {
            status: 200,
            headers: { 'Content-Type': 'application/json' },
          });
        } else {
          // Fallback: traditional form submission with page refresh
          message = 'Bean added successfully!';
          messageType = 'success';
        }
      } else if (action === 'log_coffee') {
        // Parse and validate
        const rawData = {
          brew_method: formData.get('brew_method'),
          bean_id: formData.get('bean_id') || null,
          dose_grams: Number(formData.get('dose_grams')),
          yield_grams: formData.get('yield_grams') ? Number(formData.get('yield_grams')) : null,
          grind_setting: Number(formData.get('grind_setting')),
          quality_rating: Number(formData.get('quality_rating')),
          brew_time: formData.get('brew_time') as string,
          notes: formData.get('notes') || null,
        };

        const validatedData = CoffeeLogSchema.parse(rawData);

        // Insert into database
        const { error } = await supabase.from('coffee_logs').insert({
          brew_method: validatedData.brew_method,
          bean_id: validatedData.bean_id,
          dose_grams: validatedData.dose_grams,
          yield_grams: validatedData.yield_grams,
          grind_setting: validatedData.grind_setting,
          quality_rating: validatedData.quality_rating,
          brew_time: validatedData.brew_time,
          notes: validatedData.notes,
        });

        if (error) throw error;

        message = 'Coffee logged successfully!';
        messageType = 'success';
      }
    } catch (error) {
      console.error('Error logging coffee:', error);
      if (error instanceof Error) {
        message = `Error: ${error.message}`;
      } else {
        message = 'Error: Unknown error occurred';
      }
      messageType = 'error';
    }
  }
}

// Fetch active beans for dropdown
let activeBeans: CoffeeBeanRow[] = [];
if (supabase) {
  try {
    const { data } = await supabase
      .from('coffee_beans')
      .select('*')
      .eq('is_active', true)
      .order('created_at', { ascending: false });

    activeBeans = data || [];
  } catch (error) {
    console.warn('Could not fetch beans:', error);
  }
}

// Fetch smart defaults from last coffee log
type BrewMethod = (typeof BREW_METHODS)[number];

let smartDefaults: {
  brew_method: BrewMethod | null;
  grind_setting: number | null;
  dose_grams: number | null;
  yield_grams: number | null;
} = {
  brew_method: null,
  grind_setting: null,
  dose_grams: null,
  yield_grams: null,
};

if (supabase) {
  try {
    const { data } = await supabase
      .from('coffee_logs')
      .select('brew_method, grind_setting, dose_grams, yield_grams')
      .order('brew_time', { ascending: false })
      .limit(1)
      .single();

    if (data) {
      smartDefaults = data;
    }
  } catch (error) {
    // No previous logs or error - use hardcoded defaults
    console.warn('Could not fetch smart defaults:', error);
  }
}
---

<Layout title="Coffee Logger">
  <nav class="mb">
    <a href="/admin"> ‚Üê Back to Dashboard </a>
  </nav>

  <header class="mb">
    <h1>Coffee Logger</h1>
    <p>Quick log your daily brews</p>
  </header>

  {
    !supabase ? (
      <section class="notice-box" data-variant="warning">
        <h2>Database Not Configured</h2>
        <p>Coffee tracking requires Supabase to be configured. Please set up your database:</p>
        <ol>
          <li>Create a Supabase project</li>
          <li>Run the schema.sql file in your Supabase SQL Editor</li>
          <li>Add your Supabase credentials to .env</li>
          <li>Restart the application</li>
        </ol>
        <a href="/admin" role="button">
          Go to Admin Dashboard
        </a>
      </section>
    ) : (
      <section>
        {message && messageType && (
          <div class="notice-box" data-variant={messageType === 'success' ? 'success' : 'error'}>
            {message}
          </div>
        )}

        <CoffeeLogForm client:load activeBeans={activeBeans} smartDefaults={smartDefaults} />
      </section>
    )
  }
</Layout>

<script>
  import { initBeans } from '@/stores/beansStore';

  // Initialize beans store with server data
  const beansData = document.getElementById('beans-data')?.textContent;
  if (beansData) {
    try {
      const beans = JSON.parse(beansData);
      initBeans(beans);
    } catch (e) {
      console.error('Failed to parse beans data:', e);
    }
  }
</script>

<script id="beans-data" type="application/json" set:html={JSON.stringify(activeBeans)} />
