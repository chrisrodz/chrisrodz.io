#!/usr/bin/env node
import { readFileSync, writeFileSync } from 'fs';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const enPath = join(__dirname, '../src/i18n/en.json');
const outputPath = join(__dirname, '../src/lib/i18n-keys.ts');

function generateKeys(obj, prefix = '') {
  const keys = [];
  for (const [key, value] of Object.entries(obj)) {
    const fullKey = prefix ? `${prefix}.${key}` : key;
    if (typeof value === 'string') {
      keys.push(fullKey);
    } else if (typeof value === 'object' && value !== null) {
      keys.push(...generateKeys(value, fullKey));
    }
  }
  return keys;
}

try {
  const enContent = readFileSync(enPath, 'utf-8');
  const enData = JSON.parse(enContent);
  const keys = generateKeys(enData);

  const typeDefinition = `// Auto-generated by scripts/generate-i18n-types.js
// Do not edit manually - run 'yarn generate:i18n' to regenerate

export type TranslationKey =
${keys.map((k) => `  | '${k}'`).join('\n')};
`;

  writeFileSync(outputPath, typeDefinition);
  console.log(`✅ Generated ${keys.length} translation keys → ${outputPath}`);
} catch (error) {
  console.error('❌ Error generating types:', error.message);
  process.exit(1);
}
